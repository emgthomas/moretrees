[1] 10
[1] 20
[1] 30
[1] 40
[1] 50
[1] 60
[1] 70
[1] 80
[1] 90
[1] 100
[1] 110
[1] 120
[1] 130
[1] 140
[1] 150
[1] 160
[1] 170
[1] 180
[1] 190
[1] 200
[1] 210
[1] 220
[1] 230
[1] 240
[1] 250
[1] 260
[1] 270
[1] 280
[1] 290
[1] 300
[1] 310
[1] 320
[1] 330
[1] 340
[1] 350
[1] 360
[1] 370
[1] 380
[1] 390
[1] 400
[1] 410
[1] 420
[1] 430
[1] 440
[1] 450
[1] 460
[1] 470
[1] 480
[1] 490
[1] 500
[1] 510
[1] 520
[1] 530
[1] 540
[1] 550
[1] 560
[1] 570
[1] 580
[1] 590
[1] 600
[1] 610
[1] 620
[1] 630
[1] 640
[1] 650
[1] 660
[1] 670
[1] 680
[1] 690
[1] 700
[1] 710
[1] 720
[1] 730
[1] 740
[1] 750
[1] 760
[1] 770
[1] 780
[1] 790
[1] 800
[1] 810
[1] 820
[1] 830
[1] 840
[1] 850
[1] 860
[1] 870
[1] 880
[1] 890
[1] 900
[1] 910
[1] 920
[1] 930
[1] 940
[1] 950
[1] 960
[1] 970
[1] 980
[1] 990
[1] 1000
[1] 1010
[1] 1020
[1] 1030
[1] 1040
[1] 1050
[1] 1060
[1] 1070
[1] 1080
[1] 1090
[1] 1100
[1] 1110
[1] 1120
[1] 1130
[1] 1140
[1] 1150
[1] 1160
[1] 1170
[1] 1180
[1] 1190
[1] 1200
[1] 1210
[1] 1220
[1] 1230
[1] 1240
[1] 1250
[1] 1260
[1] 1270
[1] 1280
[1] 1290
[1] 1300
[1] 1310
[1] 1320
[1] 1330
[1] 1340
[1] 1350
[1] 1360
[1] 1370
[1] 1380
[1] 1390
[1] 1400
[1] 1410
[1] 1420
[1] 1430
[1] 1440
[1] 1450
[1] 1460
[1] 1470
[1] 1480
[1] 1490
[1] 1500
[1] 1510
[1] 1520
[1] 1530
[1] 1540
[1] 1550
[1] 1560
[1] 1570
[1] 1580
[1] 1590
[1] 1600
[1] 1610
[1] 1620
[1] 1630
[1] 1640
[1] 1650
[1] 1660
[1] 1670
[1] 1680
[1] 1690
[1] 1700
[1] 1710
[1] 1720
[1] 1730
[1] 1740
[1] 1750
[1] 1760
[1] 1770
[1] 1780
[1] 1790
[1] 1800
[1] 1810
[1] 1820
[1] 1830
[1] 1840
[1] 1850
[1] 1860
[1] 1870
[1] 1880
[1] 1890
[1] 1900
[1] 1910
[1] 1920
[1] 1930
[1] 1940
[1] 1950
[1] 1960
[1] 1970
[1] 1980
[1] 1990
[1] 2000
[1] 2010
[1] 2020
[1] 2030
[1] 2040
[1] 2050
[1] 2060
[1] 2070
[1] 2080
[1] 2090
[1] 2100
[1] 2110
[1] 2120
[1] 2130
[1] 2140
[1] 2150
[1] 2160
[1] 2170
[1] 2180
[1] 2190
[1] 2200
[1] 2210
[1] 2220
[1] 2230
[1] 2240
[1] 2250
[1] 2260
[1] 2270
[1] 2280
[1] 2290
[1] 2300
[1] 2310
[1] 2320
[1] 2330
[1] 2340
[1] 2350
[1] 2360
[1] 2370
[1] 2380
[1] 2390
[1] 2400
[1] 2410
[1] 2420
[1] 2430
[1] 2440
[1] 2450
[1] 2460
[1] 2470
[1] 2480
[1] 2490
[1] 2500
[1] 2510
[1] 2520
[1] 2530
[1] 2540
[1] 2550
[1] 2560
[1] 2570
[1] 2580
[1] 2590
[1] 2600
[1] 2610
[1] 2620
[1] 2630
[1] 2640
[1] 2650
[1] 2660
[1] 2670
[1] 2680
[1] 2690
[1] 2700
[1] 2710
[1] 2720
[1] 2730
[1] 2740
[1] 2750
[1] 2760
[1] 2770
[1] 2780
[1] 2790
[1] 2800
[1] 2810
[1] 2820
[1] 2830
[1] 2840
[1] 2850
[1] 2860
[1] 2870
[1] 2880
[1] 2890
[1] 2900
[1] 2910
[1] 2920
[1] 2930
[1] 2940
[1] 2950
[1] 2960
[1] 2970
[1] 2980
[1] 2990
[1] 3000
[1] 3010
[1] 3020
[1] 3030
[1] 3040
[1] 3050
[1] 3060
[1] 3070
[1] 3080
[1] 3090
[1] 3100
[1] 3110
[1] 3120
[1] 3130
[1] 3140
[1] 3150
[1] 3160
[1] 3170
[1] 3180
[1] 3190
[1] 3200
[1] 3210
[1] 3220
[1] 3230
[1] 3240
[1] 3250
[1] 3260
[1] 3270
[1] 3280
[1] 3290
[1] 3300
[1] 3310
[1] 3320
[1] 3330
[1] 3340
[1] 3350
[1] 3360
[1] 3370
[1] 3380
[1] 3390
[1] 3400
[1] 3410
[1] 3420
[1] 3430
[1] 3440
[1] 3450
[1] 3460
[1] 3470
[1] 3480
[1] 3490
[1] 3500
[1] 3510
[1] 3520
[1] 3530
[1] 3540
[1] 3550
[1] 3560
[1] 3570
[1] 3580
[1] 3590
[1] 3600
[1] 3610
[1] 3620
[1] 3630
[1] 3640
[1] 3650
[1] 3660
[1] 3670
[1] 3680
[1] 3690
[1] 3700
[1] 3710
[1] 3720
[1] 3730
[1] 3740
[1] 3750
[1] 3760
[1] 3770
[1] "Converged after 3778 steps."
$by.self
                  self.time self.pct total.time total.pct mem.total
"unlist"             883.90    31.79     885.96     31.86  539588.0
"exp"                366.36    13.18     366.36     13.18  134121.5
"^"                  206.02     7.41     206.02      7.41   66283.9
"FUN"                197.34     7.10    2780.52    100.00 1460038.7
"-"                  174.74     6.28     174.74      6.28  130953.2
"g_fun"              145.70     5.24     632.70     22.75  337242.6
"/"                  136.26     4.90     136.26      4.90   77314.4
"log1p.exp.vec"      118.34     4.26     404.72     14.56  182244.7
"VI_step_ss"          99.92     3.59    2779.76     99.97 1459814.1
"log1p"               97.46     3.51      97.46      3.51       0.2
"*"                   96.84     3.48      96.84      3.48   55626.1
"sum"                 86.86     3.12      86.86      3.12   51585.1
"!="                  64.28     2.31      64.28      2.31   37494.7
"g_fun.vec"           31.34     1.13     389.32     14.00  180511.1
"<="                  28.82     1.04      28.82      1.04   32693.7
"ELBO.fun_ss"         16.58     0.60    1414.84     50.88  677965.2
"+"                   14.74     0.53      14.74      0.53   10584.1
"lapply"               4.86     0.17    2780.52    100.00 1460038.7
"diag<-"               3.02     0.11       3.12      0.11    2708.3
"%*%"                  2.46     0.09       2.46      0.09    1883.6
"("                    1.60     0.06       1.60      0.06     996.3
"length"               0.70     0.03       0.70      0.03     419.4
"lengths"              0.52     0.02       0.52      0.02     242.1
"sapply"               0.24     0.01     541.40     19.47  248235.0
"unique"               0.24     0.01       1.04      0.04     518.5
"=="                   0.24     0.01       0.24      0.01     136.9
"unique.default"       0.18     0.01       0.28      0.01     141.0
"standardGeneric"      0.14     0.01       3.34      0.12    2830.9
":"                    0.12     0.00       0.12      0.00      85.7
"numeric"              0.12     0.00       0.12      0.00      45.8
"is.factor"            0.10     0.00       0.10      0.00      31.3
"VI_binary_ss"         0.08     0.00    2780.52    100.00 1460038.7
"match.fun"            0.06     0.00       0.12      0.00      15.8
"cbind"                0.06     0.00       0.06      0.00      52.8
"is.function"          0.06     0.00       0.06      0.00      15.5
"print.default"        0.06     0.00       0.06      0.00      23.6
"t"                    0.04     0.00       0.14      0.01      91.2
"loglogit"             0.02     0.00     445.52     16.02  220116.5
"simplify2array"       0.02     0.00       1.06      0.04     531.0
"&"                    0.02     0.00       0.02      0.00       7.8
"abs"                  0.02     0.00       0.02      0.00       7.8
"lazyLoadDBfetch"      0.02     0.00       0.02      0.00       0.6
"mean"                 0.02     0.00       0.02      0.00       7.8

$by.total
                  total.time total.pct mem.total self.time self.pct
"FUN"                2780.52    100.00 1460038.7    197.34     7.10
"lapply"             2780.52    100.00 1460038.7      4.86     0.17
"VI_binary_ss"       2780.52    100.00 1460038.7      0.08     0.00
"%dopar%"            2780.52    100.00 1460038.7      0.00     0.00
"doTryCatch"         2780.52    100.00 1460038.7      0.00     0.00
"e$fun"              2780.52    100.00 1460038.7      0.00     0.00
"eval"               2780.52    100.00 1460038.7      0.00     0.00
"mclapply"           2780.52    100.00 1460038.7      0.00     0.00
"sendMaster"         2780.52    100.00 1460038.7      0.00     0.00
"try"                2780.52    100.00 1460038.7      0.00     0.00
"tryCatch"           2780.52    100.00 1460038.7      0.00     0.00
"tryCatchList"       2780.52    100.00 1460038.7      0.00     0.00
"tryCatchOne"        2780.52    100.00 1460038.7      0.00     0.00
"VI_step_ss"         2779.76     99.97 1459814.1     99.92     3.59
"ELBO.fun_ss"        1414.84     50.88  677965.2     16.58     0.60
"unlist"              885.96     31.86  539588.0    883.90    31.79
"g_fun"               632.70     22.75  337242.6    145.70     5.24
"sapply"              541.40     19.47  248235.0      0.24     0.01
"loglogit"            445.52     16.02  220116.5      0.02     0.00
"log1p.exp.vec"       404.72     14.56  182244.7    118.34     4.26
"g_fun.vec"           389.32     14.00  180511.1     31.34     1.13
"exp"                 366.36     13.18  134121.5    366.36    13.18
"^"                   206.02      7.41   66283.9    206.02     7.41
"-"                   174.74      6.28  130953.2    174.74     6.28
"/"                   136.26      4.90   77314.4    136.26     4.90
"log1p"                97.46      3.51       0.2     97.46     3.51
"*"                    96.84      3.48   55626.1     96.84     3.48
"sum"                  86.86      3.12   51585.1     86.86     3.12
"!="                   64.28      2.31   37494.7     64.28     2.31
"<="                   28.82      1.04   32693.7     28.82     1.04
"+"                    14.74      0.53   10584.1     14.74     0.53
"standardGeneric"       3.34      0.12    2830.9      0.14     0.01
"diag<-"                3.12      0.11    2708.3      3.02     0.11
"%*%"                   2.46      0.09    1883.6      2.46     0.09
"("                     1.60      0.06     996.3      1.60     0.06
"simplify2array"        1.06      0.04     531.0      0.02     0.00
"unique"                1.04      0.04     518.5      0.24     0.01
"length"                0.70      0.03     419.4      0.70     0.03
"lengths"               0.52      0.02     242.1      0.52     0.02
"unique.default"        0.28      0.01     141.0      0.18     0.01
"=="                    0.24      0.01     136.9      0.24     0.01
"t"                     0.14      0.01      91.2      0.04     0.00
":"                     0.12      0.00      85.7      0.12     0.00
"numeric"               0.12      0.00      45.8      0.12     0.00
"match.fun"             0.12      0.00      15.8      0.06     0.00
"is.factor"             0.10      0.00      31.3      0.10     0.00
"cbind"                 0.06      0.00      52.8      0.06     0.00
"is.function"           0.06      0.00      15.5      0.06     0.00
"print.default"         0.06      0.00      23.6      0.06     0.00
"print"                 0.06      0.00      23.6      0.00     0.00
"&"                     0.02      0.00       7.8      0.02     0.00
"abs"                   0.02      0.00       7.8      0.02     0.00
"lazyLoadDBfetch"       0.02      0.00       0.6      0.02     0.00
"mean"                  0.02      0.00       7.8      0.02     0.00

$sample.interval
[1] 0.02

$sampling.time
[1] 2780.52

