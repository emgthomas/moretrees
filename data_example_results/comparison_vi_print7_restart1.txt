[1] 10
[1] 20
[1] 30
[1] 40
[1] 50
[1] 60
[1] 70
[1] 80
[1] 90
[1] 100
[1] 110
[1] 120
[1] 130
[1] 140
[1] 150
[1] 160
[1] 170
[1] 180
[1] 190
[1] 200
[1] 210
[1] 220
[1] 230
[1] 240
[1] 250
[1] 260
[1] 270
[1] 280
[1] 290
[1] 300
[1] 310
[1] 320
[1] 330
[1] 340
[1] 350
[1] 360
[1] 370
[1] 380
[1] 390
[1] 400
[1] 410
[1] 420
[1] 430
[1] 440
[1] 450
[1] 460
[1] 470
[1] 480
[1] 490
[1] 500
[1] 510
[1] 520
[1] 530
[1] 540
[1] 550
[1] 560
[1] 570
[1] 580
[1] 590
[1] 600
[1] 610
[1] 620
[1] 630
[1] 640
[1] 650
[1] 660
[1] 670
[1] 680
[1] 690
[1] 700
[1] 710
[1] 720
[1] 730
[1] 740
[1] 750
[1] 760
[1] 770
[1] 780
[1] 790
[1] 800
[1] 810
[1] 820
[1] 830
[1] 840
[1] 850
[1] 860
[1] 870
[1] 880
[1] 890
[1] 900
[1] 910
[1] 920
[1] 930
[1] 940
[1] 950
[1] 960
[1] 970
[1] 980
[1] 990
[1] 1000
[1] 1010
[1] 1020
[1] 1030
[1] 1040
[1] 1050
[1] 1060
[1] 1070
[1] 1080
[1] 1090
[1] 1100
[1] 1110
[1] 1120
[1] 1130
[1] 1140
[1] 1150
[1] 1160
[1] 1170
[1] 1180
[1] 1190
[1] 1200
[1] 1210
[1] 1220
[1] 1230
[1] 1240
[1] 1250
[1] 1260
[1] 1270
[1] 1280
[1] 1290
[1] 1300
[1] 1310
[1] 1320
[1] 1330
[1] 1340
[1] 1350
[1] 1360
[1] 1370
[1] 1380
[1] 1390
[1] 1400
[1] 1410
[1] 1420
[1] 1430
[1] 1440
[1] 1450
[1] 1460
[1] 1470
[1] 1480
[1] 1490
[1] 1500
[1] 1510
[1] 1520
[1] 1530
[1] 1540
[1] 1550
[1] 1560
[1] 1570
[1] 1580
[1] 1590
[1] 1600
[1] 1610
[1] 1620
[1] 1630
[1] 1640
[1] 1650
[1] 1660
[1] 1670
[1] 1680
[1] 1690
[1] 1700
[1] 1710
[1] 1720
[1] 1730
[1] 1740
[1] 1750
[1] 1760
[1] 1770
[1] 1780
[1] 1790
[1] 1800
[1] 1810
[1] 1820
[1] 1830
[1] 1840
[1] 1850
[1] 1860
[1] 1870
[1] 1880
[1] 1890
[1] 1900
[1] 1910
[1] 1920
[1] 1930
[1] 1940
[1] 1950
[1] 1960
[1] 1970
[1] 1980
[1] 1990
[1] 2000
[1] 2010
[1] 2020
[1] 2030
[1] 2040
[1] 2050
[1] 2060
[1] 2070
[1] 2080
[1] 2090
[1] 2100
[1] 2110
[1] 2120
[1] 2130
[1] 2140
[1] 2150
[1] 2160
[1] 2170
[1] 2180
[1] 2190
[1] 2200
[1] 2210
[1] 2220
[1] 2230
[1] 2240
[1] 2250
[1] 2260
[1] 2270
[1] 2280
[1] 2290
[1] 2300
[1] 2310
[1] 2320
[1] 2330
[1] 2340
[1] 2350
[1] 2360
[1] 2370
[1] 2380
[1] 2390
[1] 2400
[1] 2410
[1] 2420
[1] 2430
[1] 2440
[1] 2450
[1] 2460
[1] 2470
[1] 2480
[1] 2490
[1] 2500
[1] 2510
[1] 2520
[1] 2530
[1] 2540
[1] 2550
[1] 2560
[1] 2570
[1] 2580
[1] 2590
[1] 2600
[1] 2610
[1] 2620
[1] 2630
[1] 2640
[1] 2650
[1] 2660
[1] 2670
[1] 2680
[1] 2690
[1] 2700
[1] 2710
[1] 2720
[1] 2730
[1] 2740
[1] 2750
[1] 2760
[1] 2770
[1] 2780
[1] 2790
[1] 2800
[1] 2810
[1] 2820
[1] 2830
[1] 2840
[1] 2850
[1] 2860
[1] 2870
[1] 2880
[1] 2890
[1] 2900
[1] 2910
[1] 2920
[1] 2930
[1] 2940
[1] 2950
[1] 2960
[1] 2970
[1] 2980
[1] 2990
[1] 3000
[1] 3010
[1] 3020
[1] 3030
[1] 3040
[1] 3050
[1] 3060
[1] 3070
[1] 3080
[1] 3090
[1] 3100
[1] 3110
[1] 3120
[1] 3130
[1] 3140
[1] 3150
[1] 3160
[1] 3170
[1] 3180
[1] 3190
[1] 3200
[1] 3210
[1] 3220
[1] 3230
[1] 3240
[1] 3250
[1] 3260
[1] 3270
[1] 3280
[1] 3290
[1] 3300
[1] 3310
[1] 3320
[1] 3330
[1] 3340
[1] 3350
[1] 3360
[1] 3370
[1] 3380
[1] 3390
[1] 3400
[1] 3410
[1] 3420
[1] 3430
[1] 3440
[1] 3450
[1] 3460
[1] 3470
[1] 3480
[1] 3490
[1] 3500
[1] 3510
[1] 3520
[1] 3530
[1] 3540
[1] 3550
[1] 3560
[1] 3570
[1] 3580
[1] 3590
[1] 3600
[1] 3610
[1] 3620
[1] 3630
[1] 3640
[1] 3650
[1] 3660
[1] 3670
[1] 3680
[1] 3690
[1] 3700
[1] 3710
[1] 3720
[1] 3730
[1] 3740
[1] 3750
[1] 3760
[1] 3770
[1] 3780
[1] 3790
[1] 3800
[1] 3810
[1] 3820
[1] 3830
[1] 3840
[1] 3850
[1] 3860
[1] 3870
[1] 3880
[1] 3890
[1] 3900
[1] 3910
[1] 3920
[1] 3930
[1] 3940
[1] 3950
[1] 3960
[1] 3970
[1] "Converged after 3976 steps."
$by.self
                  self.time self.pct total.time total.pct mem.total
"unlist"            2059.12    24.76    2061.56     24.79  514598.9
"exp"                948.28    11.40     948.28     11.40  321605.3
"^"                  939.10    11.29     939.10     11.29  238845.6
"FUN"                651.14     7.83    8315.74    100.00 2945704.2
"log1p.exp.vec"      642.20     7.72    1404.94     16.89  418050.1
"-"                  527.54     6.34     527.54      6.34  225795.1
"g_fun"              445.62     5.36    1816.08     21.84  664325.1
"/"                  391.34     4.71     391.34      4.71  274605.1
"g_fun.vec"          361.66     4.35    1489.42     17.91  493599.4
"*"                  350.88     4.22     350.88      4.22  244776.6
"log1p"              256.42     3.08     256.42      3.08       0.2
"!="                 221.42     2.66     221.42      2.66  173347.4
"sum"                218.68     2.63     218.68      2.63  222388.9
"VI_step_ss"         114.72     1.38    8314.54     99.99 2945165.4
"<="                  80.30     0.97      80.30      0.97   76426.5
"+"                   40.60     0.49      40.60      0.49   22409.8
"diag<-"              33.44     0.40      33.52      0.40    4009.7
"ELBO.fun_ss"         18.52     0.22    4287.24     51.56 1440042.0
"lapply"               5.64     0.07    8315.74    100.00 2945704.2
"%*%"                  3.24     0.04       3.24      0.04    2628.8
"("                    2.26     0.03       2.26      0.03    2034.1
"length"               0.78     0.01       0.78      0.01     473.1
"lengths"              0.54     0.01       0.54      0.01     392.9
"numeric"              0.38     0.00       0.38      0.00     280.9
"unique"               0.28     0.00       1.12      0.01     873.2
"unique.default"       0.26     0.00       0.30      0.00     271.8
"=="                   0.24     0.00       0.24      0.00     146.5
"sapply"               0.18     0.00    1566.50     18.84  563950.4
"VI_binary_ss"         0.16     0.00    8315.74    100.00 2945704.2
"t"                    0.16     0.00       0.26      0.00     264.1
"standardGeneric"      0.12     0.00      33.76      0.41    4253.6
"isFALSE"              0.12     0.00       0.14      0.00     123.6
"loglogit"             0.08     0.00    1574.62     18.94  474677.2
"match.fun"            0.08     0.00       0.10      0.00      85.4
"cbind"                0.06     0.00       0.06      0.00      70.8
"simplify2array"       0.04     0.00       1.16      0.01     885.4
"is.factor"            0.04     0.00       0.04      0.00      41.4
"%%"                   0.02     0.00       0.02      0.00      13.5
"&"                    0.02     0.00       0.02      0.00      12.2
":"                    0.02     0.00       0.02      0.00      27.6
"is.function"          0.02     0.00       0.02      0.00      18.2
"lazyLoadDBfetch"      0.02     0.00       0.02      0.00       0.0

$by.total
                  total.time total.pct mem.total self.time self.pct
"FUN"                8315.74    100.00 2945704.2    651.14     7.83
"lapply"             8315.74    100.00 2945704.2      5.64     0.07
"VI_binary_ss"       8315.74    100.00 2945704.2      0.16     0.00
"%dopar%"            8315.74    100.00 2945704.2      0.00     0.00
"doTryCatch"         8315.74    100.00 2945704.2      0.00     0.00
"e$fun"              8315.74    100.00 2945704.2      0.00     0.00
"eval"               8315.74    100.00 2945704.2      0.00     0.00
"mclapply"           8315.74    100.00 2945704.2      0.00     0.00
"sendMaster"         8315.74    100.00 2945704.2      0.00     0.00
"try"                8315.74    100.00 2945704.2      0.00     0.00
"tryCatch"           8315.74    100.00 2945704.2      0.00     0.00
"tryCatchList"       8315.74    100.00 2945704.2      0.00     0.00
"tryCatchOne"        8315.74    100.00 2945704.2      0.00     0.00
"VI_step_ss"         8314.54     99.99 2945165.4    114.72     1.38
"ELBO.fun_ss"        4287.24     51.56 1440042.0     18.52     0.22
"unlist"             2061.56     24.79  514598.9   2059.12    24.76
"g_fun"              1816.08     21.84  664325.1    445.62     5.36
"loglogit"           1574.62     18.94  474677.2      0.08     0.00
"sapply"             1566.50     18.84  563950.4      0.18     0.00
"g_fun.vec"          1489.42     17.91  493599.4    361.66     4.35
"log1p.exp.vec"      1404.94     16.89  418050.1    642.20     7.72
"exp"                 948.28     11.40  321605.3    948.28    11.40
"^"                   939.10     11.29  238845.6    939.10    11.29
"-"                   527.54      6.34  225795.1    527.54     6.34
"/"                   391.34      4.71  274605.1    391.34     4.71
"*"                   350.88      4.22  244776.6    350.88     4.22
"log1p"               256.42      3.08       0.2    256.42     3.08
"!="                  221.42      2.66  173347.4    221.42     2.66
"sum"                 218.68      2.63  222388.9    218.68     2.63
"<="                   80.30      0.97   76426.5     80.30     0.97
"+"                    40.60      0.49   22409.8     40.60     0.49
"standardGeneric"      33.76      0.41    4253.6      0.12     0.00
"diag<-"               33.52      0.40    4009.7     33.44     0.40
"%*%"                   3.24      0.04    2628.8      3.24     0.04
"("                     2.26      0.03    2034.1      2.26     0.03
"simplify2array"        1.16      0.01     885.4      0.04     0.00
"unique"                1.12      0.01     873.2      0.28     0.00
"length"                0.78      0.01     473.1      0.78     0.01
"lengths"               0.54      0.01     392.9      0.54     0.01
"numeric"               0.38      0.00     280.9      0.38     0.00
"unique.default"        0.30      0.00     271.8      0.26     0.00
"t"                     0.26      0.00     264.1      0.16     0.00
"=="                    0.24      0.00     146.5      0.24     0.00
"isFALSE"               0.14      0.00     123.6      0.12     0.00
"match.fun"             0.10      0.00      85.4      0.08     0.00
"cbind"                 0.06      0.00      70.8      0.06     0.00
"is.factor"             0.04      0.00      41.4      0.04     0.00
"%%"                    0.02      0.00      13.5      0.02     0.00
"&"                     0.02      0.00      12.2      0.02     0.00
":"                     0.02      0.00      27.6      0.02     0.00
"is.function"           0.02      0.00      18.2      0.02     0.00
"lazyLoadDBfetch"       0.02      0.00       0.0      0.02     0.00

$sample.interval
[1] 0.02

$sampling.time
[1] 8315.74

