[1] 10
[1] 20
[1] 30
[1] 40
[1] 50
[1] 60
[1] 70
[1] 80
[1] 90
[1] 100
[1] 110
[1] 120
[1] 130
[1] 140
[1] 150
[1] 160
[1] 170
[1] 180
[1] 190
[1] 200
[1] 210
[1] 220
[1] 230
[1] 240
[1] 250
[1] 260
[1] 270
[1] 280
[1] 290
[1] 300
[1] 310
[1] 320
[1] 330
[1] 340
[1] 350
[1] 360
[1] 370
[1] 380
[1] 390
[1] 400
[1] 410
[1] 420
[1] 430
[1] 440
[1] 450
[1] 460
[1] 470
[1] 480
[1] 490
[1] 500
[1] 510
[1] 520
[1] 530
[1] 540
[1] 550
[1] 560
[1] 570
[1] 580
[1] 590
[1] 600
[1] 610
[1] 620
[1] 630
[1] 640
[1] 650
[1] 660
[1] 670
[1] 680
[1] 690
[1] 700
[1] 710
[1] 720
[1] 730
[1] 740
[1] 750
[1] 760
[1] 770
[1] 780
[1] 790
[1] 800
[1] 810
[1] 820
[1] 830
[1] 840
[1] 850
[1] 860
[1] 870
[1] 880
[1] 890
[1] 900
[1] 910
[1] 920
[1] 930
[1] 940
[1] 950
[1] 960
[1] 970
[1] 980
[1] 990
[1] 1000
[1] 1010
[1] 1020
[1] 1030
[1] 1040
[1] 1050
[1] 1060
[1] 1070
[1] 1080
[1] 1090
[1] 1100
[1] 1110
[1] 1120
[1] 1130
[1] 1140
[1] 1150
[1] 1160
[1] 1170
[1] 1180
[1] 1190
[1] 1200
[1] 1210
[1] 1220
[1] 1230
[1] 1240
[1] 1250
[1] 1260
[1] 1270
[1] 1280
[1] 1290
[1] 1300
[1] 1310
[1] 1320
[1] 1330
[1] 1340
[1] 1350
[1] 1360
[1] 1370
[1] 1380
[1] 1390
[1] 1400
[1] 1410
[1] 1420
[1] 1430
[1] 1440
[1] 1450
[1] 1460
[1] 1470
[1] 1480
[1] 1490
[1] 1500
[1] 1510
[1] 1520
[1] 1530
[1] 1540
[1] 1550
[1] 1560
[1] 1570
[1] 1580
[1] 1590
[1] 1600
[1] 1610
[1] 1620
[1] 1630
[1] 1640
[1] 1650
[1] 1660
[1] 1670
[1] 1680
[1] 1690
[1] 1700
[1] 1710
[1] 1720
[1] 1730
[1] 1740
[1] 1750
[1] 1760
[1] 1770
[1] 1780
[1] 1790
[1] 1800
[1] 1810
[1] 1820
[1] 1830
[1] 1840
[1] 1850
[1] 1860
[1] 1870
[1] 1880
[1] 1890
[1] 1900
[1] 1910
[1] 1920
[1] 1930
[1] 1940
[1] 1950
[1] 1960
[1] 1970
[1] 1980
[1] 1990
[1] 2000
[1] 2010
[1] 2020
[1] 2030
[1] 2040
[1] 2050
[1] 2060
[1] 2070
[1] 2080
[1] 2090
[1] 2100
[1] 2110
[1] 2120
[1] 2130
[1] 2140
[1] 2150
[1] 2160
[1] 2170
[1] 2180
[1] 2190
[1] 2200
[1] 2210
[1] 2220
[1] 2230
[1] 2240
[1] 2250
[1] 2260
[1] 2270
[1] 2280
[1] 2290
[1] 2300
[1] 2310
[1] 2320
[1] 2330
[1] 2340
[1] 2350
[1] 2360
[1] 2370
[1] 2380
[1] 2390
[1] 2400
[1] 2410
[1] 2420
[1] 2430
[1] 2440
[1] 2450
[1] 2460
[1] 2470
[1] 2480
[1] 2490
[1] 2500
[1] 2510
[1] 2520
[1] 2530
[1] 2540
[1] 2550
[1] 2560
[1] 2570
[1] 2580
[1] 2590
[1] 2600
[1] 2610
[1] 2620
[1] 2630
[1] 2640
[1] 2650
[1] 2660
[1] 2670
[1] 2680
[1] 2690
[1] 2700
[1] 2710
[1] 2720
[1] 2730
[1] 2740
[1] 2750
[1] 2760
[1] 2770
[1] 2780
[1] 2790
[1] 2800
[1] 2810
[1] 2820
[1] 2830
[1] 2840
[1] 2850
[1] 2860
[1] 2870
[1] 2880
[1] 2890
[1] 2900
[1] 2910
[1] 2920
[1] 2930
[1] 2940
[1] 2950
[1] 2960
[1] 2970
[1] 2980
[1] 2990
[1] 3000
[1] 3010
[1] 3020
[1] 3030
[1] 3040
[1] 3050
[1] 3060
[1] 3070
[1] 3080
[1] 3090
[1] 3100
[1] 3110
[1] 3120
[1] 3130
[1] 3140
[1] 3150
[1] 3160
[1] 3170
[1] 3180
[1] 3190
[1] 3200
[1] 3210
[1] 3220
[1] 3230
[1] 3240
[1] 3250
[1] 3260
[1] 3270
[1] 3280
[1] 3290
[1] 3300
[1] 3310
[1] 3320
[1] "Converged after 3327 steps."
$by.self
                  self.time self.pct total.time total.pct mem.total
"unlist"             691.02    30.64     693.04     30.73  463001.1
"exp"                272.50    12.08     272.50     12.08  103857.0
"^"                  188.74     8.37     188.74      8.37   65563.2
"FUN"                188.50     8.36    2255.12    100.00 1282702.7
"-"                  157.72     6.99     157.72      6.99  120362.6
"g_fun"              111.62     4.95     502.10     22.26  295427.1
"log1p.exp.vec"      105.22     4.67     314.94     13.97  172392.6
"/"                   99.84     4.43      99.84      4.43   64362.8
"*"                   83.50     3.70      83.50      3.70   49956.3
"VI_step_ss"          81.22     3.60    2254.30     99.96 1282456.6
"log1p"               71.36     3.16      71.36      3.16       0.2
"sum"                 68.72     3.05      68.72      3.05   41403.0
"!="                  47.24     2.09      47.24      2.09   29355.4
"g_fun.vec"           24.42     1.08     320.18     14.20  162997.8
"<="                  21.80     0.97      21.80      0.97   29021.7
"+"                   15.34     0.68      15.34      0.68    9041.6
"ELBO.fun_ss"         14.10     0.63    1172.50     51.99  604269.7
"lapply"               4.06     0.18    2255.12    100.00 1282702.7
"diag<-"               2.52     0.11       2.70      0.12    2514.3
"%*%"                  1.78     0.08       1.78      0.08    1509.2
"("                    1.30     0.06       1.30      0.06     776.2
"length"               0.46     0.02       0.46      0.02     332.3
"lengths"              0.36     0.02       0.36      0.02     203.4
"unique.default"       0.24     0.01       0.34      0.02     170.9
"standardGeneric"      0.22     0.01       3.06      0.14    2736.9
"unique"               0.18     0.01       0.88      0.04     452.4
"=="                   0.16     0.01       0.16      0.01      72.0
"sapply"               0.14     0.01     446.06     19.78  215554.0
"cbind"                0.12     0.01       0.12      0.01     111.5
"VI_binary_ss"         0.10     0.00    2255.12    100.00 1282702.7
"is.factor"            0.10     0.00       0.10      0.00      55.0
":"                    0.08     0.00       0.08      0.00      48.8
"numeric"              0.08     0.00       0.08      0.00      30.5
"print.default"        0.06     0.00       0.06      0.00      23.6
"t.default"            0.06     0.00       0.06      0.00      44.2
"t"                    0.04     0.00       0.24      0.01     175.3
"isFALSE"              0.04     0.00       0.06      0.00      29.9
"match.fun"            0.04     0.00       0.04      0.00      15.5
"simplify2array"       0.02     0.00       0.90      0.04     458.3
"print"                0.02     0.00       0.10      0.00      39.5
"abs"                  0.02     0.00       0.02      0.00       7.8
"is.na"                0.02     0.00       0.02      0.00      16.0
"lazyLoadDBfetch"      0.02     0.00       0.02      0.00       8.0
"list"                 0.02     0.00       0.02      0.00       7.8

$by.total
                  total.time total.pct mem.total self.time self.pct
"FUN"                2255.12    100.00 1282702.7    188.50     8.36
"lapply"             2255.12    100.00 1282702.7      4.06     0.18
"VI_binary_ss"       2255.12    100.00 1282702.7      0.10     0.00
"%dopar%"            2255.12    100.00 1282702.7      0.00     0.00
"doTryCatch"         2255.12    100.00 1282702.7      0.00     0.00
"e$fun"              2255.12    100.00 1282702.7      0.00     0.00
"eval"               2255.12    100.00 1282702.7      0.00     0.00
"mclapply"           2255.12    100.00 1282702.7      0.00     0.00
"sendMaster"         2255.12    100.00 1282702.7      0.00     0.00
"try"                2255.12    100.00 1282702.7      0.00     0.00
"tryCatch"           2255.12    100.00 1282702.7      0.00     0.00
"tryCatchList"       2255.12    100.00 1282702.7      0.00     0.00
"tryCatchOne"        2255.12    100.00 1282702.7      0.00     0.00
"VI_step_ss"         2254.30     99.96 1282456.6     81.22     3.60
"ELBO.fun_ss"        1172.50     51.99  604269.7     14.10     0.63
"unlist"              693.04     30.73  463001.1    691.02    30.64
"g_fun"               502.10     22.26  295427.1    111.62     4.95
"sapply"              446.06     19.78  215554.0      0.14     0.01
"loglogit"            351.50     15.59  206802.5      0.00     0.00
"g_fun.vec"           320.18     14.20  162997.8     24.42     1.08
"log1p.exp.vec"       314.94     13.97  172392.6    105.22     4.67
"exp"                 272.50     12.08  103857.0    272.50    12.08
"^"                   188.74      8.37   65563.2    188.74     8.37
"-"                   157.72      6.99  120362.6    157.72     6.99
"/"                    99.84      4.43   64362.8     99.84     4.43
"*"                    83.50      3.70   49956.3     83.50     3.70
"log1p"                71.36      3.16       0.2     71.36     3.16
"sum"                  68.72      3.05   41403.0     68.72     3.05
"!="                   47.24      2.09   29355.4     47.24     2.09
"<="                   21.80      0.97   29021.7     21.80     0.97
"+"                    15.34      0.68    9041.6     15.34     0.68
"standardGeneric"       3.06      0.14    2736.9      0.22     0.01
"diag<-"                2.70      0.12    2514.3      2.52     0.11
"%*%"                   1.78      0.08    1509.2      1.78     0.08
"("                     1.30      0.06     776.2      1.30     0.06
"simplify2array"        0.90      0.04     458.3      0.02     0.00
"unique"                0.88      0.04     452.4      0.18     0.01
"length"                0.46      0.02     332.3      0.46     0.02
"lengths"               0.36      0.02     203.4      0.36     0.02
"unique.default"        0.34      0.02     170.9      0.24     0.01
"t"                     0.24      0.01     175.3      0.04     0.00
"=="                    0.16      0.01      72.0      0.16     0.01
"cbind"                 0.12      0.01     111.5      0.12     0.01
"is.factor"             0.10      0.00      55.0      0.10     0.00
"print"                 0.10      0.00      39.5      0.02     0.00
":"                     0.08      0.00      48.8      0.08     0.00
"numeric"               0.08      0.00      30.5      0.08     0.00
"print.default"         0.06      0.00      23.6      0.06     0.00
"t.default"             0.06      0.00      44.2      0.06     0.00
"isFALSE"               0.06      0.00      29.9      0.04     0.00
"match.fun"             0.04      0.00      15.5      0.04     0.00
"abs"                   0.02      0.00       7.8      0.02     0.00
"is.na"                 0.02      0.00      16.0      0.02     0.00
"lazyLoadDBfetch"       0.02      0.00       8.0      0.02     0.00
"list"                  0.02      0.00       7.8      0.02     0.00
"get"                   0.02      0.00       8.0      0.00     0.00
"mean"                  0.02      0.00       7.8      0.00     0.00

$sample.interval
[1] 0.02

$sampling.time
[1] 2255.12

